scalar Date

# utilitarios
enum Sexo {
  M
  F
}

# Geral
type LocalizacaoSchema {
  cidade: String
  provincia: String
}

# CONSUMIDOR\
type FazendeiroToken {
  fazendeiro: FazendeiroSchema
  token: ID!
}

type ConsumidorSchema {
  id_consumidor: ID
  nome_consumidor: String
  email: String
  sexo: Sexo
  data_nascimento: Date
  caminho_foto_consumidor: String
  createdAt: Date
  localizacao: LocalizacaoSchema
}

type WishListSchema {
  id_produto_favorito: ID
  produto_id_produto: String
  consumidor_id_consumidor: ID
  createdAt: Date
}

type CarrinhoSchema {
  id_carrinho: ID
  produto_id_produto: String
  consumidor_id_consumidor: ID
  createdAt: Date
}

type FazendaFavoritaSchema {
  id_fazenda_favorita: ID
  consumidor_id_consumidor: ID
  fazenda_id_fazenda: String
  createdAt: Date
}

type ConsumidorTokenSchema {
  consumidor: ConsumidorSchema
  token: ID!
}

input ConsumidorInput {
  nome_consumidor: String
  email: String
  senha: String
  sexo: Sexo
  data_nascimento: Date
  caminho_foto_consumidor: String
}

input LocalizacaoInput {
  provincia: String
  cidade: String
}

# FAZENDEIRO\
type FazendeiroSchema {
  id_fazendeiro: ID
  nome_fazendeiro: String
  email: String
  quantidade_fazendas: Int
  sexo: Sexo
  data_nascimento: Date
  caminho_foto_fazendeiro: String
  createdAt: Date
  localizacao: LocalizacaoSchema
}

type FazendaSchema {
  id_fazenda: ID!
  nome_fazenda: String!
  quantidade_clientes: Int
  createdAt: Date
  fazendeiro_id_fazendeiro: String
  nif: ID
}

type ProdutoSchema {
  id_produto: ID
  nome_produto: String
  preco_produto: Float
  categoria: CategoriaSchema
  caminho_foto_produto: String
  descricao: String
  servico_entrega_disponivel: Boolean
  disponivel: Boolean
  fazenda_id_fazenda: ID
  createdAt: Date
}

type CategoriaSchema {
  id_categoria: Int
  nome_categoria: String
  createdAt: Date
}

type EmployeeSchema {
  id_colaborador: String
  entidade: FazendaSchema
  referencia_consumidor: ConsumidorSchema
}

type StockSchema {
  id_stock: ID
  nome_produto: String
  quantidade_disponivel: Int
  stock_inicial: Int
  createdAt: Date
  fazenda_id_fazenda: String
}

# Inputs | Campos de criação
input FazendeiroInput {
  bi_fazendeiro: String!
  nome_fazendeiro: String
  email: String
  senha: String!
  caminho_foto_fazendeiro: String
  sexo: Sexo
  data_nascimento: Date
}

input LocalizacaoInput {
  provincia: String
  cidade: String
}

input FazendaInput {
  nome_fazenda: String!
  nif_fazenda: String!
}

input ProdutoInput {
  nome_produto: String
  preco_produto: Float
  caminho_foto_produto: String
  descricao: String
  servico_entrega_disponivel: Boolean
}

# SET\
type UserSchema {
  field: String
  status: Boolean
  userid: ID
}

type Query {
  # SET\\\
  costumers(limit: Int): [ConsumidorSchema]
  farmers(limit: Int): [FazendeiroSchema]
  products(limit: Int): [ProdutoSchema]
  user(email: String): UserSchema

  #   FAZENDEIRO\\\
  # FIXME: Coordenar com o schema.ts e Database.getSoldProduct(DatabaseConnection.ts)
  sold(id_fazenda: ID!, id_monitoramento: ID!): ProdutoSchema
  # resolvidos
  solds(id_fazenda: ID!): [ProdutoSchema]
  productsByFarm(id_fazenda: ID!): [ProdutoSchema]
  stock(id_fazenda: ID!): [StockSchema]
  product(id_fazenda: ID!, id_product: ID!): ProdutoSchema
  productByCategory(id_categoria: Int!): [ProdutoSchema]
  # TODO: fromFarmGetProductsByCategory |  Aqui
  clients(id_fazenda: ID!): [ConsumidorSchema]
  client(id_fazenda: ID!, id_client: ID!): ConsumidorSchema
  # TODO: Tratar de terminar o Schema sobre o retorno das estatisticas
  statistics(id_fazenda: ID!): [ConsumidorSchema]

  #   CONSUMIDOR\\\
  health: String!
}

type Mutation {
  # CONSUMIDOR\\\
  createCostumer(
    consumidor: ConsumidorInput
    localizacao: LocalizacaoInput
  ): ConsumidorTokenSchema
  addToWishList(id_consumidor: ID!, id_produto: ID!): Int # ou ainda -> WishListSchema
  addToCart(id_consumidor: ID!, id_produto: ID!): Int # ou ainda -> CarrinhoSchema
  createFavoriteFarm(id_consumidor: ID!, id_fazenda: ID!): FazendaFavoritaSchema

  # FAZENDEIRO\\\\
  createFarmer(
    fazendeiro: FazendeiroInput
    localizacao: LocalizacaoInput
  ): FazendeiroToken
  createFarm(id_fazendeiro: String!, farm: FazendaInput): FazendaSchema
  createProduct(
    id_fazenda: String!
    nome_categoria: String!
    produto: ProdutoInput
  ): ProdutoSchema
  sellProduct(id_consumidor: ID!, id_produto: ID!): ProdutoSchema
  createEmployee(id_fazenda: ID!, id_consumidor: ID!): Int
}
