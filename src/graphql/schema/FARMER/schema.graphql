extend schema
    @link(
        url: "https://specs.apollo.dev/federation/v2.0"
        import: ["@key", "@shareable", "@inaccessible", "@external"]
    )

scalar Date

# utilitarios
enum Sexo {
    M
    F
}

# enum Role {
#   Fazendeiro
#   Consumidor
#   Employee
# }

type LocalizacaoSchema @shareable {
    provincia: String
    cidade: String
}

# Entidades | como [fazendeiro, consumidor, produto, fazenda]
type FazendeiroSchema @key(fields: "id_fazendeiro") {
    id_fazendeiro: ID
    nome_fazendeiro: String
    email: String
    quantidade_fazendas: Int
    sexo: Sexo
    data_nascimento: Date
    caminho_foto_fazendeiro: String
    createdAt: Date
    localizacao: LocalizacaoSchema
}

type FazendaSchema @key(fields: "id_fazenda") {
    id_fazenda: ID!
    nome_fazenda: String!
    quantidade_clientes: Int
    createdAt: Date
    fazendeiro_id_fazendeiro: String
    nif: ID
}

type ProdutoSchema @key(fields: "id_produto") {
    id_produto: ID
    nome_produto: String
    preco_produto: Float
    categoria: CategoriaSchema
    caminho_foto_produto: String
    descricao: String
    servico_entrega_disponivel: Boolean
    disponivel: Boolean
    fazenda_id_fazenda: ID
    createdAt: Date
}

extend type ConsumidorSchema @key(fields: "id_consumidor") {
    id_consumidor: ID @external
}

# Complementares | campos extras
type CategoriaSchema {
    id_categoria: Int
    nome_categoria: String
    createdAt: Date
}

type EmployeeSchema {
    id_colaborador: String
    entidade: FazendaSchema
    referencia_consumidor: ConsumidorSchema
}

type StockSchema {
    id_stock: ID
    nome_produto: String
    quantidade_disponivel: Int
    stock_inicial: Int
    createdAt: Date
    fazenda_id_fazenda: String
}

# Inputs | Campos de criação
input FazendeiroInput {
    bi_fazendeiro: String!
    nome_fazendeiro: String
    email: String
    senha: String!
    caminho_foto_fazendeiro: String
    sexo: Sexo
    data_nascimento: Date
}

input LocalizacaoInput {
    provincia: String
    cidade: String
}

input FazendaInput {
    nome_fazenda: String!
    nif_fazenda: String!
}

input ProdutoInput {
    nome_produto: String
    preco_produto: Float
    caminho_foto_produto: String
    descricao: String
    servico_entrega_disponivel: Boolean
}

type FazendeiroToken {
    fazendeiro: FazendeiroSchema
    token: ID!
}

# As querys padrao
type Query {
    # FIXME: Coordenar com o schema.ts e Database.getSoldProduct(DatabaseConnection.ts)
    sold(id_fazenda: ID!, id_monitoramento: ID!): ProdutoSchema
    # resolvidos
    solds(id_fazenda: ID!): [ProdutoSchema]
    productsByFarm(id_fazenda: ID!): [ProdutoSchema]
    stock(id_fazenda: ID!): [StockSchema]
    product(id_fazenda: ID!, id_product: ID!): ProdutoSchema
    productByCategory(id_categoria: Int!): [ProdutoSchema]
    # TODO: fromFarmGetProductsByCategory |  Aqui
    clients(id_fazenda: ID!): [ConsumidorSchema]
    client(id_fazenda: ID!, id_client: ID!): ConsumidorSchema
    # TODO: Tratar de terminar o Schema sobre o retorno das estatisticas
    statistics(id_fazenda: ID!): [ConsumidorSchema]
}

type Mutation {
    createFarmer(
        fazendeiro: FazendeiroInput
        localizacao: LocalizacaoInput
    ): FazendeiroToken
    createFarm(id_fazendeiro: String!, farm: FazendaInput): FazendaSchema
    createProduct(
        id_fazenda: String!
        nome_categoria: String!
        produto: ProdutoInput
    ): ProdutoSchema
    sellProduct(id_consumidor: ID!, id_produto: ID!): ProdutoSchema
    createEmployee(id_fazenda: ID!, id_consumidor: ID!): Int
}
