extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.0", import: ["@key"])
  
scalar Date

enum Sexo {
  M
  F
}

enum Role {
  Farmer
  Costumer
  Employee
}

type FazendeiroSchema @key(fields: "id_fazendeiro") {
  id_fazendeiro: ID
  nome_fazendeiro: String
  email: String
  quantidade_fazendas: Int
  sexo: Sexo
  data_nascimento: Date
  role: Role
  createAt: Date
  updatedAt: Date
  localizacao_id_localizacao: String
}

type LocalizacaoSchema @key(fields: "id_localizacao") {
  id_localizacao: ID
  provincia: String
  cidade: String
  createdAt: Date
}

type FarmSchema @key(fields: "id_fazenda") {
  id_fazenda: ID
  nome_fazenda: String
  createAt: Date
  updatedAt: Date
  fazendeiro_id_fazendeiro: String
}

type SimpleLocalizacaoSchema {
  cidade: String
  provincia: String
}

type ConsumidorSchema @key(fields: "id_consumidor") {
  id_consumidor: ID
  nome_consumidor: String
  email: String
  numero_telefone: String
  sexo: Sexo
  data_nascimento: Date
  caminho_foto_consumidor: String
  createAt: Date
  localizacao: SimpleLocalizacaoSchema
}

type CategoriaSchema @key(fields: "id_categoria") {
  id_categoria: Int
  nome_categoria: String
  createdAt: Date
}

type CreateProductTypeSchema @key(fields: "id_fazenda") {
  id_fazenda: ID
  categoria: CategoriaSchema
}

type ProductSchema @key(fields: "id_produto") {
  id_produto: ID
  nome_produto: String
  preco_produto: Float
  categoria_id_categoria: Int
  caminho_foto_produto: String
  descricao: String
  servico_entrega_disponivel: Boolean
  disponivel: Boolean
  fazenda_id_fazenda: String
  createAt: Date
  updatedAt: Date
}

type EmployeeSchema @key(fields: "id_colaborador") {
  id_colaborador: ID
  entidade_id_fazenda: String
  empregado_id_consumidor: String
}

type CreateEmployeeSchema {
  entidade: FarmSchema
  empregado: ConsumidorSchema
  employee: EmployeeSchema
}

type WishListSchema @key(fields: "id_produto_favorito") {
  id_produto_favorito: ID
  produto_id_produto: String
  consumidor_id_consumidor: String
  createdAt: Date
  updatedAt: Date
}

type CarrinhoSchema @key(fields: "id_carrinho") {
  id_carrinho: ID
  produto_id_produto: String
  consumidor_id_consumidor: String
  createdAt: Date
  updatedAt: Date
}

type FazendaFavoritaSchema @key(fields: "id_fazenda_favorita") {
  id_fazenda_favorita: ID
  consumidor_id_consumidor: String
  fazenda_id_fazenda: String
  createdAt: Date
  updatedAt: Date
}

" provendo os valores "
input ConsumidorInput {
  nome_consumidor: String
  email: String
  numero_telefone: String
  senha: String
  sexo: Sexo
  data_nascimento: Date
  caminho_foto_consumidor: String
  numero_compras: Int
  role: Role
}

input LocalizacaoInput {
  provincia: String
  cidade: String
}

type Query {
  health: String!
}

type Mutation {
  createCostumer(
    consumidor: ConsumidorInput
    localizacao: LocalizacaoInput
  ): ConsumidorSchema
  addToWishList(id_consumidor: ID!, id_produto: ID!): WishListSchema
  addToCart( id_consumidor: ID!, id_produto: ID!): CarrinhoSchema
  createFavoriteFarm(id_consumidor: ID!, id_fazenda: ID!): FazendaFavoritaSchema
}
