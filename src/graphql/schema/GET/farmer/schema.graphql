extend schema 
  @link(url: "https://specs.apollo.dev/federation/v2.0", 
    import: ["@key", "@shareable", "@inaccessible", "@external"])

scalar Date

enum Sexo {
  M
  F
}

enum Role {
  Farmer
  Costumer
  Employee
}

type FazendeiroSchema @key(fields: "id_fazendeiro") {
  id_fazendeiro: ID
  nome_fazendeiro: String
  email: String
  quantidade_fazendas: Int
  sexo: Sexo
  data_nascimento: Date
  role: Role
  createAt: Date
  updatedAt: Date
  localizacao_id_localizacao: ID
}

type ProductSchema @key(fields: "id_produto") {
  id_produto: ID
  nome_produto: String
  preco_produto: Float
  categoria_id_categoria: ID
  caminho_foto_produto: String
  descricao: String
  servico_entrega_disponivel: Boolean
  disponivel: Boolean
  fazenda_id_fazenda: ID
  createAt: Date
}

type StockSchema @key(fields: "id_stock") { # passei por aqui
  id_stock: ID
  nome_produto: String
  quantidade_disponivel: Int
  stock_inicial: Int
  createdAt: Date
  fazenda_id_fazenda: String
  # produto: ProductSchema
}

extend type ConsumidorSchema @key(fields: "id_consumidor") {
  id_consumidor: ID @external
  id_client: ID
  compras: [ProductSchema]
  numero_compras: Int
  id_monitoramento: ID
}

type Query {
  # FIXME: Coordenar com o schema.ts e Database.getSoldProduct(DatabaseConnection.ts)
  sold(id_fazenda: ID!, id_monitoramento: ID!): ProductSchema
  
  # Resolvidos
  solds(id_fazenda: ID!): [ProductSchema]
  product(id_fazenda: ID!, id_product: ID!): ProductSchema
  products(id_fazenda: ID!): [ProductSchema]
  stock(id_fazenda: ID!): [StockSchema]
  productByCategory(id_categoria: Int!): [ProductSchema]
  # TODO: fromFarmGetProductsByCategory |  Aqui
  client(id_fazenda: ID!, id_client: ID!): ConsumidorSchema
  clients(id_fazenda: ID!): [ConsumidorSchema]
  # TODO: Tratar de terminar o Schema sobre o retorno das estatisticas
  statistics(id_fazenda: ID!): [ConsumidorSchema]
}
